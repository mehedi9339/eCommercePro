// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eCommerce.Context;

namespace eCommerce.Migrations
{
    [DbContext(typeof(databaseContext))]
    [Migration("20201006063531_init5")]
    partial class init5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<Guid>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("eCommerce.Models.Auth.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("456bd13f-feeb-43f8-8c5b-6690e4c00599"),
                            ConcurrencyStamp = "7399ed4d-686a-4eda-865e-126e6db3cc12",
                            Name = "Super Admin",
                            NormalizedName = "SUPER ADMIN"
                        },
                        new
                        {
                            Id = new Guid("3a147637-4680-4971-abcc-15d67a1a6c89"),
                            ConcurrencyStamp = "38c3d78b-4f79-4ffa-bc4a-cf3810205480",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("07a335c4-3d84-45c6-a47e-eb2d2060554a"),
                            ConcurrencyStamp = "b780f9f3-1aea-44cf-984c-efa7764e7aa9",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("eCommerce.Models.Auth.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("04a694a6-b0da-4134-b5e2-13bcb9fbfe66"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8c2b999d-a41e-4467-a4b0-5a02fad72cc4",
                            Email = "sadmin@sadmin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SADMIN@SADMIN.COM",
                            PasswordHash = "AE29fFV+k8QlZd4dfzMX760Jsi5K9Y2ycLn3zt2k/gA62AA1yH9RsiPMuLP6L0vtYQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("4cafa93f-988c-47f3-b12c-d54c672a29aa"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f847976-4b5d-413f-bbc8-b7848313be46",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            PasswordHash = "ANMKai0nq94kZbgFD3JULcXJVDQkleaf0HcnBbMxLZm2UTaYoGNxwig4gnlx4uZvqg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("9c9847ee-0f1c-4c20-9bf8-6f104e2577ff"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b0305c9-27c4-4079-8ba1-bd5af771d8f8",
                            Email = "user@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@USER.COM",
                            PasswordHash = "AM0fbbNMSt2Sz6nLVeL6SKxXlNRv+lzImLI8pUU6SHqW3ZXFRQnzkee8i3URe0ZZMw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("eCommerce.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("CartId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            CartId = 1,
                            CustomerId = 1
                        });
                });

            modelBuilder.Entity("eCommerce.Models.CartDetail", b =>
                {
                    b.Property<int>("CartDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartDetailId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartDetails");

                    b.HasData(
                        new
                        {
                            CartDetailId = 1,
                            CartId = 1,
                            ProductId = 1,
                            Quantity = 4
                        },
                        new
                        {
                            CartDetailId = 2,
                            CartId = 1,
                            ProductId = 2,
                            Quantity = 3
                        });
                });

            modelBuilder.Entity("eCommerce.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Description = "Electronics",
                            Name = "Electronics",
                            ParentId = 0
                        },
                        new
                        {
                            CategoryId = 2,
                            Description = "Cat",
                            Name = "Animal Food",
                            ParentId = 0
                        },
                        new
                        {
                            CategoryId = 3,
                            Description = "Light",
                            Name = "Light",
                            ParentId = 1
                        },
                        new
                        {
                            CategoryId = 4,
                            Description = "Energy Bulb",
                            Name = "Energy Bulb",
                            ParentId = 3
                        });
                });

            modelBuilder.Entity("eCommerce.Models.Currier", b =>
                {
                    b.Property<int>("CurrierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(11)")
                        .HasMaxLength(11);

                    b.Property<int>("ThanaId")
                        .HasColumnType("int");

                    b.HasKey("CurrierId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ThanaId");

                    b.ToTable("Currier");

                    b.HasData(
                        new
                        {
                            CurrierId = 1,
                            DistrictId = 1,
                            Name = "Sundarban",
                            Phone = "01927343454",
                            ThanaId = 1
                        },
                        new
                        {
                            CurrierId = 2,
                            DistrictId = 1,
                            Name = "Continental",
                            Phone = "01927356754",
                            ThanaId = 1
                        });
                });

            modelBuilder.Entity("eCommerce.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .HasColumnType("nvarchar(11)")
                        .HasMaxLength(11);

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThanaId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CustomerId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ThanaId");

                    b.HasIndex("UserId");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Address = "Dhaka",
                            CompanyContact = "09876543",
                            CompanyName = "Sr.Company",
                            CompanyWebsite = "sr@c.com",
                            ContactNo = "01678907623",
                            DistrictId = 3,
                            Email = "m@m.com",
                            Name = "Maham",
                            ThanaId = 1,
                            UserId = new Guid("9c9847ee-0f1c-4c20-9bf8-6f104e2577ff")
                        });
                });

            modelBuilder.Entity("eCommerce.Models.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistrictId");

                    b.ToTable("Districts");

                    b.HasData(
                        new
                        {
                            DistrictId = 1,
                            Name = "Dhaka"
                        },
                        new
                        {
                            DistrictId = 2,
                            Name = "Kustia"
                        },
                        new
                        {
                            DistrictId = 3,
                            Name = "Pabna"
                        });
                });

            modelBuilder.Entity("eCommerce.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DeliveryStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<bool>("PaymentStatus")
                        .HasColumnType("bit");

                    b.Property<int>("ShippingAddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionTime")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ShippingAddressId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            CustomerId = 1,
                            DeliveryDate = new DateTime(2020, 10, 13, 12, 35, 29, 834, DateTimeKind.Local).AddTicks(5953),
                            DeliveryFee = 50m,
                            DeliveryStatus = 0,
                            OrderDate = new DateTime(2020, 10, 6, 12, 35, 29, 833, DateTimeKind.Local).AddTicks(7543),
                            OrderNo = "ORD202010031",
                            OrderStatus = 1,
                            PaymentStatus = true,
                            ShippingAddressId = 1,
                            ShippingDate = new DateTime(2020, 10, 7, 12, 35, 29, 834, DateTimeKind.Local).AddTicks(6510),
                            TotalAmount = 500m,
                            TransactionId = "TRX1234567",
                            TransactionTime = new DateTime(2020, 10, 6, 12, 35, 29, 834, DateTimeKind.Local).AddTicks(8378)
                        });
                });

            modelBuilder.Entity("eCommerce.Models.Others.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "No Color"
                        },
                        new
                        {
                            Id = 2,
                            Name = "bbbbdfad"
                        });
                });

            modelBuilder.Entity("eCommerce.Models.Others.ModelTbl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ModelTbls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "No Model"
                        },
                        new
                        {
                            Id = 2,
                            Name = "skghsdjg"
                        });
                });

            modelBuilder.Entity("eCommerce.Models.Others.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "No Size"
                        },
                        new
                        {
                            Id = 2,
                            Name = "klasdfasd"
                        });
                });

            modelBuilder.Entity("eCommerce.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SalesDiscountRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SalesPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UnitId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            DiscountRate = 8m,
                            ExpireDate = new DateTime(2021, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image1 = "tv.img",
                            Image2 = "tv.img",
                            Image3 = "tv.img",
                            Name = "TV",
                            ProductCode = "P01",
                            ProductDescription = "Electronics",
                            SalesDiscountRate = 5m,
                            SalesPrice = 500m,
                            Status = 0,
                            UnitId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2,
                            DiscountRate = 8m,
                            ExpireDate = new DateTime(2020, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image1 = "tv.img",
                            Image2 = "tv.img",
                            Image3 = "tv.img",
                            Name = "Shirt",
                            ProductCode = "P02",
                            ProductDescription = "Cloths",
                            SalesDiscountRate = 5m,
                            SalesPrice = 600m,
                            Status = 0,
                            UnitId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 2,
                            DiscountRate = 8m,
                            ExpireDate = new DateTime(2021, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image1 = "tv.img",
                            Image2 = "tv.img",
                            Image3 = "tv.img",
                            Name = "Sharee",
                            ProductCode = "P03",
                            ProductDescription = "Cloths",
                            SalesDiscountRate = 5m,
                            SalesPrice = 2000m,
                            Status = 0,
                            UnitId = 1
                        });
                });

            modelBuilder.Entity("eCommerce.Models.PurchaseDetail", b =>
                {
                    b.Property<int>("PurchaseDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("EntryBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<int?>("ModelId")
                        .HasColumnType("int");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("SizeId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UnitQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("VatRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PurchaseDetailId");

                    b.HasIndex("ColorId");

                    b.HasIndex("EntryBy");

                    b.HasIndex("MasterId");

                    b.HasIndex("ModelId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("PurchaseDetails");

                    b.HasData(
                        new
                        {
                            PurchaseDetailId = 1,
                            ColorId = 1,
                            Description = "dfas",
                            DiscountRate = 5m,
                            EntryBy = new Guid("9c9847ee-0f1c-4c20-9bf8-6f104e2577ff"),
                            EntryDate = new DateTime(2020, 10, 6, 12, 35, 29, 838, DateTimeKind.Local).AddTicks(9895),
                            ExpiryDate = new DateTime(2021, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MasterId = 1,
                            ModelId = 1,
                            NetAmount = 565m,
                            ProductCode = "P01",
                            ProductId = 1,
                            SizeId = 1,
                            TotalPrice = 4000m,
                            UnitPrice = 300m,
                            UnitQuantity = 65,
                            VatRate = 3m
                        },
                        new
                        {
                            PurchaseDetailId = 2,
                            ColorId = 2,
                            Description = "dfas",
                            DiscountRate = 5m,
                            EntryBy = new Guid("9c9847ee-0f1c-4c20-9bf8-6f104e2577ff"),
                            EntryDate = new DateTime(2020, 10, 6, 12, 35, 29, 839, DateTimeKind.Local).AddTicks(4011),
                            ExpiryDate = new DateTime(2020, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MasterId = 1,
                            ModelId = 2,
                            NetAmount = 565m,
                            ProductCode = "P02",
                            ProductId = 2,
                            SizeId = 1,
                            TotalPrice = 4000m,
                            UnitPrice = 300m,
                            UnitQuantity = 65,
                            VatRate = 3m
                        },
                        new
                        {
                            PurchaseDetailId = 3,
                            ColorId = 2,
                            Description = "dfas",
                            DiscountRate = 5m,
                            EntryBy = new Guid("9c9847ee-0f1c-4c20-9bf8-6f104e2577ff"),
                            EntryDate = new DateTime(2020, 10, 6, 12, 35, 29, 839, DateTimeKind.Local).AddTicks(4127),
                            ExpiryDate = new DateTime(2021, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MasterId = 1,
                            ModelId = 1,
                            NetAmount = 565m,
                            ProductCode = "P03",
                            ProductId = 3,
                            SizeId = 2,
                            TotalPrice = 4000m,
                            UnitPrice = 300m,
                            UnitQuantity = 65,
                            VatRate = 3m
                        });
                });

            modelBuilder.Entity("eCommerce.Models.PurchaseMaster", b =>
                {
                    b.Property<int>("PurchaseMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BillNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LaborCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("VatRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VoucharNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PurchaseMasterId");

                    b.ToTable("PurchaseMasters");

                    b.HasData(
                        new
                        {
                            PurchaseMasterId = 1,
                            BillNo = "123",
                            DiscountRate = 5m,
                            LaborCost = 100m,
                            NetAmount = 565588m,
                            Note = "",
                            PurchaseDate = new DateTime(2019, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 40000m,
                            TotalQuantity = 78,
                            VatRate = 3m,
                            VoucharNo = "avb"
                        });
                });

            modelBuilder.Entity("eCommerce.Models.SalesDetail", b =>
                {
                    b.Property<int>("SalesDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ModelId")
                        .HasColumnType("int");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SalesMasterId")
                        .HasColumnType("int");

                    b.Property<int?>("SizeId")
                        .HasColumnType("int");

                    b.Property<decimal>("UintPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UnitQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VatRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SalesDetailId");

                    b.HasIndex("ColorId");

                    b.HasIndex("ModelId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesMasterId");

                    b.HasIndex("SizeId");

                    b.ToTable("SalesDetails");

                    b.HasData(
                        new
                        {
                            SalesDetailId = 1,
                            DiscountAmount = 50m,
                            DiscountRate = 5m,
                            NetAmount = 550m,
                            ProductId = 1,
                            SalesMasterId = 1,
                            UintPrice = 676m,
                            UnitQuantity = 89,
                            VatAmount = 987m,
                            VatRate = 3m
                        },
                        new
                        {
                            SalesDetailId = 2,
                            DiscountAmount = 50m,
                            DiscountRate = 5m,
                            NetAmount = 450m,
                            ProductId = 1,
                            SalesMasterId = 1,
                            UintPrice = 400m,
                            UnitQuantity = 89,
                            VatAmount = 987m,
                            VatRate = 3m
                        });
                });

            modelBuilder.Entity("eCommerce.Models.SalesMaster", b =>
                {
                    b.Property<int>("SalesMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BillNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SalesDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<string>("VoucherNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SalesMasterId");

                    b.HasIndex("OrderId");

                    b.ToTable("SalesMasters");

                    b.HasData(
                        new
                        {
                            SalesMasterId = 1,
                            BillNo = "123",
                            Note = "success",
                            OrderId = 1,
                            SalesDate = new DateTime(2020, 10, 6, 12, 35, 29, 836, DateTimeKind.Local).AddTicks(9997),
                            TotalAmount = 550m,
                            TotalPrice = 1000m,
                            TotalQuantity = 2,
                            VoucherNo = "abc"
                        });
                });

            modelBuilder.Entity("eCommerce.Models.ShippingAddress", b =>
                {
                    b.Property<int>("ShippingAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrierId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(11)")
                        .HasMaxLength(11);

                    b.Property<int>("ThanaId")
                        .HasColumnType("int");

                    b.HasKey("ShippingAddressId");

                    b.HasIndex("CurrierId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ThanaId");

                    b.ToTable("ShippingAddresses");

                    b.HasData(
                        new
                        {
                            ShippingAddressId = 1,
                            Address = "Dhaka",
                            CurrierId = 1,
                            CustomerId = 1,
                            DistrictId = 1,
                            Name = "Mr ABC",
                            Phone = "01789876543",
                            ThanaId = 1
                        },
                        new
                        {
                            ShippingAddressId = 2,
                            Address = "Khulna",
                            CurrierId = 1,
                            CustomerId = 1,
                            DistrictId = 2,
                            Name = "MR Doe",
                            Phone = "01978392903",
                            ThanaId = 2
                        });
                });

            modelBuilder.Entity("eCommerce.Models.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InQuantity")
                        .HasColumnType("int");

                    b.Property<int>("InStockQuantity")
                        .HasColumnType("int");

                    b.Property<int>("LotNo")
                        .HasColumnType("int");

                    b.Property<int?>("ModelId")
                        .HasColumnType("int");

                    b.Property<int>("OutQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SalesPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SizeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StockDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("StockPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("StockId");

                    b.HasIndex("ColorId");

                    b.HasIndex("ModelId");

                    b.HasIndex("SizeId");

                    b.ToTable("Stocks");

                    b.HasData(
                        new
                        {
                            StockId = 1,
                            ColorId = 1,
                            ExpiryDate = new DateTime(2022, 10, 6, 12, 35, 29, 840, DateTimeKind.Local).AddTicks(2550),
                            InQuantity = 100,
                            InStockQuantity = 131,
                            LotNo = 1,
                            ModelId = 1,
                            OutQuantity = 0,
                            ProductCode = "P01",
                            PurchasePrice = 0m,
                            SalesPrice = 0m,
                            SizeId = 1,
                            StockDate = new DateTime(2020, 10, 6, 12, 35, 29, 839, DateTimeKind.Local).AddTicks(8930),
                            StockPrice = 300m
                        },
                        new
                        {
                            StockId = 2,
                            ColorId = 2,
                            ExpiryDate = new DateTime(2022, 10, 6, 12, 35, 29, 840, DateTimeKind.Local).AddTicks(3677),
                            InQuantity = 100,
                            InStockQuantity = 131,
                            LotNo = 1,
                            ModelId = 2,
                            OutQuantity = 0,
                            ProductCode = "P02",
                            PurchasePrice = 0m,
                            SalesPrice = 0m,
                            SizeId = 1,
                            StockDate = new DateTime(2020, 10, 6, 12, 35, 29, 840, DateTimeKind.Local).AddTicks(3614),
                            StockPrice = 300m
                        },
                        new
                        {
                            StockId = 3,
                            ColorId = 2,
                            ExpiryDate = new DateTime(2022, 10, 6, 12, 35, 29, 840, DateTimeKind.Local).AddTicks(3701),
                            InQuantity = 100,
                            InStockQuantity = 131,
                            LotNo = 1,
                            ModelId = 1,
                            OutQuantity = 0,
                            ProductCode = "P03",
                            PurchasePrice = 0m,
                            SalesPrice = 0m,
                            SizeId = 2,
                            StockDate = new DateTime(2020, 10, 6, 12, 35, 29, 840, DateTimeKind.Local).AddTicks(3699),
                            StockPrice = 300m
                        });
                });

            modelBuilder.Entity("eCommerce.Models.Thana", b =>
                {
                    b.Property<int>("ThanaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ThanaId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Thanas");

                    b.HasData(
                        new
                        {
                            ThanaId = 1,
                            DistrictId = 1,
                            Name = "Mirpur"
                        },
                        new
                        {
                            ThanaId = 2,
                            DistrictId = 2,
                            Name = "Khoksa"
                        },
                        new
                        {
                            ThanaId = 3,
                            DistrictId = 3,
                            Name = "Pabna Sadar"
                        });
                });

            modelBuilder.Entity("eCommerce.Models.Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UnitId");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            UnitId = 1,
                            Name = "Killogram",
                            ShortName = "Kg"
                        },
                        new
                        {
                            UnitId = 2,
                            Name = "Gram",
                            ShortName = "g"
                        },
                        new
                        {
                            UnitId = 3,
                            Name = "Litter",
                            ShortName = "L"
                        });
                });

            modelBuilder.Entity("eCommerce.Models.WishList", b =>
                {
                    b.Property<int>("WishListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("WishListId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("WisthLists");

                    b.HasData(
                        new
                        {
                            WishListId = 1,
                            CustomerId = 1,
                            ProductId = 3,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("eCommerce.Models.Auth.UserRoles", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>");

                    b.HasDiscriminator().HasValue("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("04a694a6-b0da-4134-b5e2-13bcb9fbfe66"),
                            RoleId = new Guid("456bd13f-feeb-43f8-8c5b-6690e4c00599")
                        },
                        new
                        {
                            UserId = new Guid("9c9847ee-0f1c-4c20-9bf8-6f104e2577ff"),
                            RoleId = new Guid("07a335c4-3d84-45c6-a47e-eb2d2060554a")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("eCommerce.Models.Auth.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("eCommerce.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("eCommerce.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("eCommerce.Models.Auth.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("eCommerce.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eCommerce.Models.Cart", b =>
                {
                    b.HasOne("eCommerce.Models.Customer", "Customer")
                        .WithMany("Carts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eCommerce.Models.CartDetail", b =>
                {
                    b.HasOne("eCommerce.Models.Cart", "Cart")
                        .WithMany("CartDetails")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Models.Product", "Product")
                        .WithMany("CartDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eCommerce.Models.Currier", b =>
                {
                    b.HasOne("eCommerce.Models.District", "District")
                        .WithMany("Curriers")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Models.Thana", "Thana")
                        .WithMany("Curriers")
                        .HasForeignKey("ThanaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eCommerce.Models.Customer", b =>
                {
                    b.HasOne("eCommerce.Models.District", "District")
                        .WithMany("Customers")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Models.Thana", "Thana")
                        .WithMany("Customers")
                        .HasForeignKey("ThanaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Models.Auth.User", "User")
                        .WithMany("Customers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eCommerce.Models.Order", b =>
                {
                    b.HasOne("eCommerce.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Models.ShippingAddress", "ShippingAddress")
                        .WithMany("Orders")
                        .HasForeignKey("ShippingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eCommerce.Models.Product", b =>
                {
                    b.HasOne("eCommerce.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Models.Unit", "Unit")
                        .WithMany("Products")
                        .HasForeignKey("UnitId");
                });

            modelBuilder.Entity("eCommerce.Models.PurchaseDetail", b =>
                {
                    b.HasOne("eCommerce.Models.Others.Color", "Color")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("ColorId");

                    b.HasOne("eCommerce.Models.Auth.User", "User")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("EntryBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Models.PurchaseMaster", "PurchaseMaster")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Models.Others.ModelTbl", "ModelTbl")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("ModelId");

                    b.HasOne("eCommerce.Models.Product", "Product")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Models.Others.Size", "Size")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("SizeId");
                });

            modelBuilder.Entity("eCommerce.Models.SalesDetail", b =>
                {
                    b.HasOne("eCommerce.Models.Others.Color", "Color")
                        .WithMany("SalesDetails")
                        .HasForeignKey("ColorId");

                    b.HasOne("eCommerce.Models.Others.ModelTbl", "ModelTbl")
                        .WithMany("SalesDetails")
                        .HasForeignKey("ModelId");

                    b.HasOne("eCommerce.Models.Product", "Product")
                        .WithMany("SalesDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Models.SalesMaster", "SalesMaster")
                        .WithMany("SalesDetails")
                        .HasForeignKey("SalesMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Models.Others.Size", "Size")
                        .WithMany("SalesDetails")
                        .HasForeignKey("SizeId");
                });

            modelBuilder.Entity("eCommerce.Models.SalesMaster", b =>
                {
                    b.HasOne("eCommerce.Models.Order", "Order")
                        .WithMany("salesMasters")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eCommerce.Models.ShippingAddress", b =>
                {
                    b.HasOne("eCommerce.Models.Currier", "Currier")
                        .WithMany("ShippingAddresses")
                        .HasForeignKey("CurrierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Models.Customer", "Customer")
                        .WithMany("ShippingAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Models.District", "District")
                        .WithMany("shippingAddresses")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Models.Thana", "Thana")
                        .WithMany("shippingAddresses")
                        .HasForeignKey("ThanaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eCommerce.Models.Stock", b =>
                {
                    b.HasOne("eCommerce.Models.Others.Color", "Color")
                        .WithMany("Stocks")
                        .HasForeignKey("ColorId");

                    b.HasOne("eCommerce.Models.Others.ModelTbl", "ModelTbl")
                        .WithMany("Stocks")
                        .HasForeignKey("ModelId");

                    b.HasOne("eCommerce.Models.Others.Size", "Size")
                        .WithMany("Stocks")
                        .HasForeignKey("SizeId");
                });

            modelBuilder.Entity("eCommerce.Models.Thana", b =>
                {
                    b.HasOne("eCommerce.Models.District", "District")
                        .WithMany("Thanas")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eCommerce.Models.WishList", b =>
                {
                    b.HasOne("eCommerce.Models.Customer", "Customer")
                        .WithMany("WisthLists")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Models.Product", "Product")
                        .WithMany("WisthLists")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
